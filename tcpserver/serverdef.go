package tcpserver

import "sync"

var table_h = []byte{0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40}
var table_l = []byte{
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
	0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
	0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
	0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
	0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
	0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
	0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
	0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
	0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
	0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
	0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
	0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
	0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
	0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
	0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
	0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
	0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
	0x41, 0x81, 0x80, 0x40}

const (
	outio   = 1
	inio    = 2
	outreg  = 3
	inreg   = 4
	setio   = 5
	setreg  = 6
	setregs = 16
)
const (
	databyte  = 1
	dataword  = 2
	datadword = 3
	datafloat = 4
)
const (
	mbready   = 0
	mbbusy    = 1
	mbtimeout = 2
	mbwite    = 4
)
const (
	Nor = 0
	Ctr = 1
)

func GetDataTypeLen(dtype int) int {
	switch dtype {
	case databyte:
		return 1
	case dataword:
		return 1
	case datadword:
		return 2
	case datafloat:
		return 2
	}
	return 4
}

//用户的基本结构
type Usr struct {
	Id   int
	Name string
	Pass string
}

//用户设备的结构
type Usrdrv struct {
	Id      int
	Usrname string
	Drvname string
}

//数据点值的储存结构
type Dotvalue struct {
	Id      int
	Drvname string
	Dotname string
	Value   float32
	Status  string
	Time    string
}

//视频设备的基本参数
type Videodrv struct {
	Id          int
	Name        string
	Appkey      string
	Appsecret   string
	Accesstoken string
	Sn          string
	Vercode     string
	Drv         string
	Liveurl     string
}

//MODBUS设备命令基本格式
//|cmd|startaddr-h|startaddr-l|addrlen-h|addrlen-l|crc|crc|
type ModbuscmdType struct {
	Cmd       int // 命令类型
	startAddr int //起始地址
	AddrLen   int //地址长度
	Type      int //类型 主要区分Ctr，默认常规数据包
	Buffer    [32]byte
	BufferLen int
}

//设备点的基本参数
type Maindot struct {
	Id       int
	Name     string
	Type     int     //寄存器类型
	Addr     int     //寄存器地址
	Rw       int     //读写方式，默认只读
	Data     int     //数据类型，float,int short char
	Alarmtop float32 //报警值参数，默认为0，当四个参数都不相同是才会启动报警功能
	Valuetop float32
	Alarmbot float32
	Valuebot float32 //报警值定义完毕
	Savetime int     //数据保存时间间隔，默认10S
	Unit     string  //数据单位
	Bynum    float32 //变换系数
	Drvname  string  //隶属于设备
	Value    float32 //数据值
	Status   string  //数据状态，用以判断是否超过报警值
}

//设备的基本参数
type Maindrv struct {
	Id       int
	Name     string //设备名称
	Addr     int    //地址，通用地址，无论是什么数据包类型
	Port     int    //TCP监听端口
	Packtype string //MODBUS,MQTT,CONFIG,WHATEVER
	Polltime int    //采样间隔时间,默认1000ms
	Idcode   int    //通讯超时时间，单位秒，超过此时间无信息流，则认为通讯超时
	Cmittype string //通讯失败重试次数，0为无限次
	Status   int    //设备状态
	Time     string //泛指添加时间
	Point    int    //需要重点监测的设备，显示在主页
	X        int
	Y        int
	Gateway  string
}
type MainDrvType struct {
	Drv       Maindrv
	Dot       []Maindot
	Drvname   string
	Sensornum int             //寄存器数据点数量
	IOnum     int             //IO数据点数量
	Logicnum  int             //逻辑判断关系个数 //预留
	Videonum  int             //视频个数
	Flashtime string          //刷新时间
	TSUrls    string          //态神设备专用读取参数的URL
	MBCmds    []ModbuscmdType //MODBUS设备读取数据的命令集
	MBCmdNum  int             //MODBUS设备的命令包的计数
	MBStatus  int             //MODBUS状态
	Online    bool
}
type Userarea struct {
	Id      int
	User    string
	Area    string
	Drvs    string
	Planebk string
}
type DailyValue struct {
	Id      int
	Dotname string
	High    float32
	Low     float32
	Time    string
}
type MainMAPstringint struct {
	U map[string]int
	M sync.Mutex
}
type MainMAPstringfloat struct {
	U map[string]float32
	M sync.Mutex
}
type Drvdotalarm struct {
	Id     int
	Drv    string
	Dot    string
	Msg    string
	Status string
	Time   string
}

type MainUserDrv struct {
	User  string
	Alarm []Drvdotalarm
	Drv   []Maindrv
}

//萤石云JSON数据格式
type AccessTokentmp struct {
	Key  string `json:"accessToken"`
	Time int    `json:"expireTime"`
}
type AccessToken struct {
	Data AccessTokentmp `json:"data"`
	Code string         `json:"code"`
	Msg  string         `json:"msg"`
}
type Comrlt struct {
	Code string `json:"code"`
	Msg  string `json:"msg"`
}
type Listpage struct {
	Total int `json:"total"`
	Page  int `json:"page"`
	Size  int `json:"size"`
}
type Lsitvideo struct {
	DeviceSerial string `json:"deviceSerial"`
	ChannelNo    int    `json:"channelNo"`
	LiveAddress  string `json:"liveAddress"`
	HdAddress    string `json:"hdAddress"`
	Rtmp         string `json:"rtmp"`
	RtmpHd       string `json:"rtmpHd"`
	Status       int    `json:"status"`
	Exception    int    `json:"exception"`
	BeginTime    int    `json:"beginTime"`
	EndTime      int    `json:"endTime"`
}
type Getlist struct {
	Page Listpage    `json:"page"`
	Data []Lsitvideo `json:"data"`
	Code string      `json:"code"`
	Msg  string      `json:"mag"`
}
type Drvvideo struct {
	Name    string
	Liveurl string
}
